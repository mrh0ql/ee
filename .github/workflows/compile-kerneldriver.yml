name: Build Kernel Driver

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-2025               # use the new Windows 2025 image :contentReference[oaicite:4]{index=4}

    steps:
      # 1. Check out your code
      - name: Checkout code
        uses: actions/checkout@v4       # latest checkout action :contentReference[oaicite:5]{index=5}

      # 2. Auto-detect your .sln file
      - name: Find solution file
        id: find_sln
        shell: bash
        run: |
          # Pick the first .sln in the repo root
          sln=$(ls *.sln | head -n1)
          echo "Found solution: $sln"
          echo "::set-output name=path::$sln"  # pass to later steps :contentReference[oaicite:6]{index=6}

      # 3. Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1  # adds msbuild.exe to PATH :contentReference[oaicite:7]{index=7}

      # 4. Install Windows Driver Kit (WDK 10) via Chocolatey
      - name: Install WDK 10
        run: choco install windowsdriverkit10 -y  # installs WDK 10.0.19041.685 :contentReference[oaicite:8]{index=8}

      # 5. Restore NuGet packages
      - name: Restore NuGet packages
        run: nuget restore "${{ steps.find_sln.outputs.path }}"  # uses detected .sln :contentReference[oaicite:9]{index=9}

      # 6. Build solution with MSBuild
      - name: Build with MSBuild
        run: |
          msbuild "${{ steps.find_sln.outputs.path }}" \
            /t:Build \
            /p:Configuration=Release \
            /m                           # parallel build :contentReference[oaicite:10]{index=10}

      # 7. Run clang-tidy static analysis
      - name: Run clang-tidy
        run: |
          if where clang-tidy; then
            clang-tidy src/**/*.cpp --fix -- -I.
          else
            echo "clang-tidy not found; skipping"
          fi                            # graceful fallback :contentReference[oaicite:11]{index=11}

      # 8. Package driver artifacts
      - name: Package artifacts
        run: |
          mkdir -p release-artifacts
          Compress-Archive -Path \
            build\Release\*.sys, driver.inf, loader.exe, README.md \
            -DestinationPath release-artifacts/DriverPackage.zip  # manual zip :contentReference[oaicite:12]{index=12}

      # 9. Upload the ZIP as a workflow artifact
      - name: Upload driver package
        uses: actions/upload-artifact@v4  # supported GA version :contentReference[oaicite:13]{index=13}
        with:
          name: DriverPackage
          path: release-artifacts/DriverPackage.zip
          retention-days: 7               # optional retention policy :contentReference[oaicite:14]{index=14}
